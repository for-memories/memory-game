{"version":3,"sources":["app.js","game-deck.js","game-page.js","init.js"],"names":[],"mappingsrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// The namespace for this application\nvar app = {\n  router: Rlite()\n};\n","//gameDeck holds the memory deck and shuffles it\n\napp.gameDeck = function (numPairs) {\n\n  var icons = [\n    'icon-droplet',\n    'icon-feather',\n    'icon-list',\n    'icon-moon',\n    'icon-eye',\n    'icon-lightbulb',\n    'icon-heart',\n    'icon-flag',\n    'icon-hourglass',\n    'icon-star',\n    'icon-camera',\n    'icon-search',\n    'icon-trash',\n    'icon-brush',\n    'icon-scissors',\n    'icon-music',\n    'icon-attach',\n    'icon-cloud',\n    'icon-umbrella',\n    'icon-leaf',\n    'icon-bug',\n    'icon-smile',\n    'icon-paw'\n  ];\n\n  if (numPairs > icons.length) {\n    throw new Error(\"numPairs cannot be greater than \" + icons.length + '.');\n  }\n\n  // use lodash _.shuffle to shuffle cards\n  var shuffledDeck = _.shuffle(icons);\n\n  //limit length of shuffle to gamePairCount\n  //concatenate the deck to itself to have 2 of each card\n  shuffledDeck.length = numPairs;\n  shuffledDeck= shuffledDeck.concat(shuffledDeck);\n\n  //shuffle the deck with pairs again\n  // lodash shuffle method yet again\n  shuffledDeck =_.shuffle(shuffledDeck);\n  return shuffledDeck;\n};\n","app.router.add('', function () {\n  // this happpens when the user is at the home page (/)\n  // Load the template with easy or hard buttons, on click set\n  // location.hash to #easy or #hard\n  var template = _.template($('#home').html());\n  var html = template();\n  //append html to the DOM\n  $('.main-content').html(html);\n  //add click listeners\n  //change the url to easy with so the router sees we are on easy\n  // router goes to easy\n  $('.easy').click(function (){\n    location.hash = '#easy';\n  });\n //now do the same with '#hard'\n $('.hard').click(function (){\n   location.hash = '#hard';\n });\n\n});\n\napp.router.add('easy', function () {\n  app.gamePage(8);\n});\n// Add two buttons to homepage, easy, hard.\n// Link the hashes like below\n//location.hash = '#easy';\napp.router.add('hard', function () {\n  app.gamePage(16);\n});\napp.gamePage = function (numPairs) {\n  var template = _.template($('#gameBoard').html(), { variable: 'm' });\n  var html = template({\n    cards: app.gameDeck(numPairs)\n  });\n\n  $('.main-content').html(html);\n\n  // There's a variable currentFlippedElement\n  // On click, check the icon of the clicked element\n  var currentFlippedElement;\n  $('input').click(function (){\n\n    // `this` is the input element that was clicked. The input is a child of\n    //game-tile, which is what we need. $(this).parent() gives us the game tile.\n    var clickedElement = $(this).parent();\n\n    //We have to go back to the paretn to get the icon name\n    //use attr() to get the value of the icon attr (icon's name)\n    var icon = clickedElement.attr('icon');\n\n    // If there's not already a currently clicked icon, then\n    // let the element stay flipped\n    if(!currentFlippedElement) {\n\n      console.log('clicked!');\n\n      //stays flipped\n      //set input to disabled\n      setTimeout(function() {\n        clickedElement.find('input').attr('disabled', 'true');\n      }, 1);\n\n      //set the clicked icon to the last clickedElement\n      currentFlippedElement = clickedElement;\n\n    } else {\n      // check the string value of icon with the value of the icon attri for currentFlippedElement\n      if (icon === currentFlippedElement.attr('icon')) {\n        //stay flipped\n        setTimeout(function() {\n          clickedElement.find('input').attr('disabled', 'true');\n        }, 1);\n\n        //reset currentFlippedElement to go back to the first click\n        currentFlippedElement ='';\n      }\n      else {\n        //unflip both icons\n        // we need to remove the disabled and checked attributes with jQuery.\n        //undisable currentFlippedElement\n\n        //uncheck both elements by removing 'checked' and 'input = disabled' attributes\n        //this unchecks and undisables the elements\n        setTimeout(function() {\n          clickedElement.find('input').removeAttr('disabled');\n          clickedElement.find('input').removeAttr('checked');\n          currentFlippedElement.find('input').removeAttr('disabled');\n          currentFlippedElement.find('input').removeAttr('checked');\n          //reset currentFlippedElement to go back to the first click\n          currentFlippedElement ='';\n        }, 150);\n\n\n      }\n    }\n\n  });\n\n\n};\n","(function () {\n\n  // Hash-based routing\n  function processHash() {\n    var hash = location.hash || '#';\n    if (!app.router.run(hash.substr(1))) {\n      // TODO: Show a 404 page...\n      alert('Could not find page: ' + hash);\n    }\n  }\n\n  window.addEventListener('hashchange', processHash);\n  processHash();\n\n})();\n"],"sourceRoot":"/source/"}